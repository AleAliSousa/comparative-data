}
# Evo M1 Genomics
# 1. Get data
library(tidyverse)
library(readxl)
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Get all filenamess from directory
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1038%2Fs41467-020-14356-3_SupplementaryData3.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, skip = 1)
# Filter files to include only those that end with ".tsv"
tsv_names <- tsv_directory_list[grep("\\.tsv$", tsv_directory_list)]
# Maybe - Eliminate problematic ones
# tsv_names <- tsv_names[tsv_names != "10.1016%2Fj.jhevol.2008.08.004_Table2.tsv"]
# Get Item Code by removing end with ".tsv"
item_encoded_names <-  sub("\\.tsv$", "", tsv_names)
# Read Excel file with item name and item encoded TSVs
filecodes <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__ReadMe.xlsx", sheet = "Sheet1")
# List of item names
item_name <- filecodes$"Item name"[match(item_encoded_names,filecodes$"Item encoded")]
# Initialize an empty list to store tsvs as data frames
tsv_data_list <- list()
# ######HIDE
# # Loop through item names, read tables from TSVs, and store as dataframes in the list, row.names = NULL
# for (i in seq_along(item_name)) {
#   cat("Processing item:", item_name[i], "\n")  # Print item name
#
#
#   item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
#   item_data <- read.table(file = paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv"), sep = "\t",
#                           header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
#
#   # Store the data frame in the list with the corresponding item name
#   tsv_data_list[[item_name[i]]] <- item_data
# }
######HIDE
######TRYHIDE
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
View(filecodes)
item_name
item_encoded_names
library(tidyverse)
library(readxl)
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
######TRYHIDE
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
###################LATER2
# Get all filenamess from directory
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# # Read tsv files using read.delim() method
# tsvtesting<-read.delim("10.1038%2Fs41467-020-14356-3_SupplementaryData3.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, skip = 1)
# Filter files to include only those that end with ".tsv"
tsv_names <- tsv_directory_list[grep("\\.tsv$", tsv_directory_list)]
# Maybe - Eliminate problematic ones
# tsv_names <- tsv_names[tsv_names != "10.1016%2Fj.jhevol.2008.08.004_Table2.tsv"]
# Get Item Code by removing end with ".tsv"
item_encoded_names <-  sub("\\.tsv$", "", tsv_names)
# Read Excel file with item name and item encoded TSVs
filecodes <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__ReadMe.xlsx", sheet = "Sheet1")
# List of item names
item_name <- filecodes$"Item name"[match(item_encoded_names,filecodes$"Item encoded")]
# Initialize an empty list to store tsvs as data frames
tsv_data_list <- list()
######TRYHIDE
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
# List all files in the directory ending with .tsv
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data", pattern = "\\.tsv$", full.names = FALSE)
tsv_directory_list
View(tsv_data_list)
# Remove the .tsv extension
tsv_directory_list <- tools::file_path_sans_ext(tsv_directory_list)
tsv_directory_list
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1126%2Fscience.aaa9101_TableS1.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, skip = 1)
View(tsvtesting)
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1126%2Fscience.aaa9101_TableS1.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
item_name
item_encoded
item_encoded[i]
item_encoded[[i]]
# Get data
library(tidyverse)
library(readxl)
## TROUBLESHOOTING TESTS
# List all files in the directory ending with .tsv
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data", pattern = "\\.tsv$", full.names = FALSE)
# Remove the .tsv extension
tsv_directory_list <- tools::file_path_sans_ext(tsv_directory_list)
tsv_directory_list
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Get data
library(tidyverse)
library(readxl)
## TROUBLESHOOTING TESTS
# List all files in the directory ending with .tsv
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data", pattern = "\\.tsv$", full.names = FALSE)
# Remove the .tsv extension
tsv_directory_list <- tools::file_path_sans_ext(tsv_directory_list)
tsv_directory_list
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1126%2Fscience.aaa9101_TableS1.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
## TROUBLESHOOTINGTESTSEND
# Get all filenames from directory
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Filter files to include only those that end with ".tsv"
tsv_names <- tsv_directory_list[grep("\\.tsv$", tsv_directory_list)]
# Maybe - Eliminate problematic ones
# tsv_names <- tsv_names[tsv_names != "10.1016%2Fj.jhevol.2008.08.004_Table2.tsv"]
# Get Item Code by removing end with ".tsv"
item_encoded_names <-  sub("\\.tsv$", "", tsv_names)
# Read Excel file with item name and item encoded TSVs
filecodes <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__ReadMe.xlsx", sheet = "Sheet1")
# List of item names
item_name <- filecodes$"Item name"[match(item_encoded_names,filecodes$"Item encoded")]
# Initialize an empty list to store tsvs as data frames
tsv_data_list <- list()
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
tsv_names <-
write_csv(tsv_names)
class(tsv_name)
class(tsv_names)
item_encoded_names
View(filecodes)
matched_data <- data.frame(ItemEncoded = filecodes$"Item encoded", ItemName = filecodes$"Item name", MatchedName = filecodes$"Item name"[match(item_encoded_names[filecodes$"Item encoded"], filecodes$"Item name")])
View(matched_data)
subset_data <- filecodes[!is.na(match(item_encoded_names, filecodes$"Item encoded")), ]
# Find the positions of matches
match_positions <- match(item_encoded_names, filecodes$"Item encoded")
# Create a subset of filecodes based on the matching positions
subset_data <- filecodes[!is.na(match_positions), ]
rlang::last_trace()
rlang::last_trace(drop = FALSE)
match_positions <- match(item_encoded_names, filecodes$"Item encoded")
# Find the positions of matches
match_positions <- match(item_encoded_names, filecodes$"Item encoded")
# Create a subset of filecodes based on the matching positions
subset_data <- filecodes[!is.na(match_positions), ]
# Create a subset of filecodes based on the matching positions
subset_data <- filecodes[!is.na(match_positions), ]
# Find the positions of matches
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
# Create a subset of filecodes based on the matching positions
subset_data <- filecodes[!is.na(match_positions), ]
# Create the matched_data dataframe
matched_data <- data.frame(ItemEncoded = subset_data$"Item encoded", ItemName = subset_data$"Item name", MatchedName = subset_data$"Item name"[match_positions])
# Find the positions of matches
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
# Create a subset of filecodes based on the matching positions
subset_data <- filecodes[!is.na(match_positions), ]
# Create the matched_data dataframe
matched_data <- data.frame(
ItemEncoded = subset_data$"Item encoded",
ItemName = subset_data$"Item name",
MatchedName = filecodes$"Item name"[match_positions]
)
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item number")]
View(new_dataframe)
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions1 <- match(filecodes$"Item encoded", item_name)
subset_data1 <- filecodes[!is.na(match_positions), ]
new_dataframe1 <- subset_data[, c("Item encoded", "Item name")]
View(new_dataframe1)
View(new_dataframe1)
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions1 <- match(filecodes$"Item name", item_name)
subset_data1 <- filecodes[!is.na(match_positions), ]
new_dataframe1 <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions1 <- match(filecodes$"Item name", item_name)
subset_data1 <- filecodes[!is.na(match_positions1), ]
new_dataframe1 <- subset_data1[, c("Item encoded", "Item name")]
item_name
item_encoded_names
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Get data
library(tidyverse)
library(readxl)
## TROUBLESHOOTING TESTS
# List all files in the directory ending with .tsv
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data", pattern = "\\.tsv$", full.names = FALSE)
# Remove the .tsv extension
tsv_directory_list <- tools::file_path_sans_ext(tsv_directory_list)
tsv_directory_list
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1126%2Fscience.aaa9101_TableS1.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions1 <- match(filecodes$"Item name", item_name)
subset_data1 <- filecodes[!is.na(match_positions1), ]
new_dataframe1 <- subset_data1[, c("Item encoded", "Item name")]
# Print the matched data
print(matched_data)
## TROUBLESHOOTINGTESTSEND
# Get all filenames from directory
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Filter files to include only those that end with ".tsv"
tsv_names <- tsv_directory_list[grep("\\.tsv$", tsv_directory_list)]
# Maybe - Eliminate problematic ones
# tsv_names <- tsv_names[tsv_names != "10.1016%2Fj.jhevol.2008.08.004_Table2.tsv"]
# Get Item Code by removing end with ".tsv"
item_encoded_names <-  sub("\\.tsv$", "", tsv_names)
# Read Excel file with item name and item encoded TSVs
filecodes <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__ReadMe.xlsx", sheet = "Sheet1")
# List of item names
item_name <- filecodes$"Item name"[match(item_encoded_names,filecodes$"Item encoded")]
# Initialize an empty list to store tsvs as data frames
tsv_data_list <- list()
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
View(new_dataframe)
tsv_names
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Get data
library(tidyverse)
library(readxl)
## TROUBLESHOOTING TESTS
# List all files in the directory ending with .tsv
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data", pattern = "\\.tsv$", full.names = FALSE)
# Remove the .tsv extension
tsv_directory_list <- tools::file_path_sans_ext(tsv_directory_list)
tsv_directory_list
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1126%2Fscience.aaa9101_TableS1.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions1 <- match(filecodes$"Item name", item_name)
subset_data1 <- filecodes[!is.na(match_positions1), ]
new_dataframe1 <- subset_data1[, c("Item encoded", "Item name")]
# Print the matched data
print(matched_data)
## TROUBLESHOOTINGTESTSEND
# Get all filenames from directory
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Filter files to include only those that end with ".tsv"
tsv_names <- tsv_directory_list[grep("\\.tsv$", tsv_directory_list)]
# Maybe - Eliminate problematic ones
# tsv_names <- tsv_names[tsv_names != "10.1016%2Fj.jhevol.2008.08.004_Table2.tsv"]
# Get Item Code by removing end with ".tsv"
item_encoded_names <-  sub("\\.tsv$", "", tsv_names)
# Read Excel file with item name and item encoded TSVs
filecodes <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__ReadMe.xlsx", sheet = "Sheet1")
# List of item names
item_name <- filecodes$"Item name"[match(item_encoded_names,filecodes$"Item encoded")]
# Initialize an empty list to store tsvs as data frames
tsv_data_list <- list()
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
# Get list of files in comparative-data
# install.packages("openxlsx")
library(openxlsx)
# List all files in the directory
list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data")
list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Write data to Excel file
write.xlsx(data, file_path, sheetName = "Sheet1", colNames = TRUE)
# Editing directories
#### ALREADY DONE
# install.packages("xfun")
# library(xfun)
# # Update directory name in all R files in the directory and its subdirectories
# gsub_dir(ext = "R", dir = "~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data", recursive = TRUE, pattern = "Evo M1 Trait Data", replacement = "Evo-M1-Trait-Data")
# # Update data pipeline step name in all R files in the directory and its subdirectories
# gsub_dir(ext = "R", dir = "~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data", recursive = TRUE, pattern = "Primary or Equivalent", replacement = "Snapshot")
# gsub_dir(ext = "R", dir = "~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data", recursive = TRUE, pattern = "primary_or_equivalent", replacement = "snapshot")
# # Update data pipeline step name in all md in the directory and its subdirectories
# gsub_dir(ext = "md", dir = "~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data", recursive = TRUE, pattern = "Primary or Equivalent", replacement = "Snapshot")
# gsub_dir(ext = "md", dir = "~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data", recursive = TRUE, pattern = "primary_or_equivalent", replacement = "snapshot")
#### ALREADY DONE
# Get list of files in comparative-data
# install.packages("openxlsx")
library(openxlsx)
# List all files in the directory
# list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data")
#
# list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Get and write the list of files to Excel
write.xlsx(data.frame(Files = list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")),
"~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/file_list.xlsx", sheetName = "FileList", colNames = TRUE)
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Get data
library(tidyverse)
library(readxl)
## TROUBLESHOOTING TESTS
# List all files in the directory ending with .tsv
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data", pattern = "\\.tsv$", full.names = FALSE)
# Remove the .tsv extension
tsv_directory_list <- tools::file_path_sans_ext(tsv_directory_list)
tsv_directory_list
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1126%2Fscience.aaa9101_TableS1.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions1 <- match(filecodes$"Item name", item_name)
subset_data1 <- filecodes[!is.na(match_positions1), ]
new_dataframe1 <- subset_data1[, c("Item encoded", "Item name")]
# Print the matched data
print(matched_data)
## TROUBLESHOOTINGTESTSEND
# Get all filenames from directory
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Filter files to include only those that end with ".tsv"
tsv_names <- tsv_directory_list[grep("\\.tsv$", tsv_directory_list)]
# Maybe - Eliminate problematic ones
# tsv_names <- tsv_names[tsv_names != "10.1016%2Fj.jhevol.2008.08.004_Table2.tsv"]
# Get Item Code by removing end with ".tsv"
item_encoded_names <-  sub("\\.tsv$", "", tsv_names)
# Read Excel file with item name and item encoded TSVs
filecodes <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__ReadMe.xlsx", sheet = "Sheet1")
# List of item names
item_name <- filecodes$"Item name"[match(item_encoded_names,filecodes$"Item encoded")]
# Initialize an empty list to store tsvs as data frames
tsv_data_list <- list()
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
item_name
item_encoded_names
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Get data
library(tidyverse)
library(readxl)
## TROUBLESHOOTING TESTS
# List all files in the directory ending with .tsv
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data", pattern = "\\.tsv$", full.names = FALSE)
# Remove the .tsv extension
tsv_directory_list <- tools::file_path_sans_ext(tsv_directory_list)
tsv_directory_list
# Read tsv files using read.delim() method
tsvtesting<-read.delim("10.1126%2Fscience.aaa9101_TableS1.tsv", sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
# Create a subset of filecodes based on the matching positions
match_positions <- match(filecodes$"Item encoded", item_encoded_names)
subset_data <- filecodes[!is.na(match_positions), ]
new_dataframe <- subset_data[, c("Item encoded", "Item name")]
# Create a subset of filecodes based on the matching positions
match_positions1 <- match(filecodes$"Item name", item_name)
subset_data1 <- filecodes[!is.na(match_positions1), ]
new_dataframe1 <- subset_data1[, c("Item encoded", "Item name")]
# Print the matched data
print(matched_data)
## TROUBLESHOOTINGTESTSEND
# Get all filenames from directory
tsv_directory_list <- list.files("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data")
# Filter files to include only those that end with ".tsv"
tsv_names <- tsv_directory_list[grep("\\.tsv$", tsv_directory_list)]
# Maybe - Eliminate problematic ones
# tsv_names <- tsv_names[tsv_names != "10.1016%2Fj.jhevol.2008.08.004_Table2.tsv"]
# Get Item Code by removing end with ".tsv"
item_encoded_names <-  sub("\\.tsv$", "", tsv_names)
# Read Excel file with item name and item encoded TSVs
filecodes <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__ReadMe.xlsx", sheet = "Sheet1")
# List of item names
item_name <- filecodes$"Item name"[match(item_encoded_names,filecodes$"Item encoded")]
# Initialize an empty list to store tsvs as data frames
tsv_data_list <- list()
# Loop through item names, read tables from TSVs, and store as data frames in the list, row.names = NULL
for (i in seq_along(item_name)) {
cat("Processing item:", item_name[i], "\n")  # Print item name
item_encoded <- filecodes$"Item encoded"[match(item_name[i], filecodes$"Item name")]
# Construct the file path
file_path <- paste0("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Evo-M1-Trait-Data/__Public/comparative-data/", item_encoded, ".tsv")
# Read the first few lines to check if it starts with "table"
first_lines <- readLines(file_path, n = 5)
starts_with_table <- any(startsWith(tolower(first_lines), "table"))
# Apply different rules based on whether the file starts with "table"
if (starts_with_table) {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL, skip = 1)
} else {
item_data <- read.delim(file = file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, row.names = NULL)
}
# Store the data frame in the list with the corresponding item name
tsv_data_list[[item_name[i]]] <- item_data
}
